/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 * @format
 */

import React from 'react';
import type { MaskedViewProps } from './MaskedViewTypes';
import { View, StyleSheet, requireNativeComponent } from 'react-native';

const RNCMaskedView = requireNativeComponent<any>('RNCMaskedView');

/**
 * Renders the child view with a mask specified in the `maskElement` prop.
 *
 * ```
 * import React from 'react';
 * import { Text, View } from 'react-native';
 * import MaskedView from '@react-native-masked-view/masked-view';
 *
 * class MyMaskedView extends React.Component {
 *   render() {
 *     return (
 *       <MaskedView
 *         style={{ flex: 1 }}
 *         maskElement={
 *           <View style={styles.maskContainerStyle}>
 *             <Text style={styles.maskTextStyle}>
 *               Basic Mask
 *             </Text>
 *           </View>
 *         }
 *       >
 *         <View style={{ flex: 1, backgroundColor: 'blue' }} />
 *       </MaskedView>
 *     );
 *   }
 * }
 * ```
 *
 * The above example will render a view with a blue background that is masked by the "Basic Mask" text.
 *
 * The maskElement is an element that defines the mask shape. The mask is the alpha channel of the maskElement.
 * Anywhere the maskElement is transparent, the child element has full opacity. Anywhere the maskElement is
 * opaque, the child element has zero opacity. Anywhere the maskElement is semi-transparent, the child element
 * has partial opacity.
 *
 * The elementMask can be a View, Text, Image, or any other view with non-animated opacity.
 * alpha channel of the maskElement.
 *
 * @see https://github.com/react-native-masked-view/react-native-masked-view
 */

class MaskedView extends React.Component<MaskedViewProps> {
  _hasWarnedInvalidRenderMask = false;

  static defaultProps = {
    androidRenderingMode: 'hardware',
  };

  render() {
    const { androidRenderingMode = 'hardware', maskElement, children, ...otherViewProps } = this.props;

    if (!React.isValidElement(maskElement)) {
      if (!this._hasWarnedInvalidRenderMask) {
        console.warn('MaskedView: Invalid `maskElement` prop was passed to MaskedView. Expected a React Element. An Element is a JavaScript object with a type and props property.');
        this._hasWarnedInvalidRenderMask = true;
      }
      return <View {...otherViewProps}>{children}</View>;
    }

    return (
      <RNCMaskedView {...otherViewProps} androidRenderingMode={androidRenderingMode}>
        <View pointerEvents="none" style={StyleSheet.absoluteFill}>
          {maskElement}
        </View>
        {children}
      </RNCMaskedView>
    );
  }
}

const StyleSheet = {
  absoluteFill: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
  },
};

export default MaskedView;
