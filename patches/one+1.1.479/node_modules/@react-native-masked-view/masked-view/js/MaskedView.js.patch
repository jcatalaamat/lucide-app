/**
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 * @format
 */

var React = require('react');
var ReactNative = require('react-native');
var View = ReactNative.View;
var StyleSheet = ReactNative.StyleSheet;
var requireNativeComponent = ReactNative.requireNativeComponent;

var RNCMaskedView = requireNativeComponent('RNCMaskedView');

/**
 * Renders the child view with a mask specified in the `maskElement` prop.
 *
 * The alpha channel of the view rendered by the `maskElement` prop determines how
 * much of the view's content and background shows through. Fully or partially
 * opaque pixels allow the underlying content to show through but fully
 * transparent pixels block that content.
 */
var MaskedView = React.createClass({
  displayName: 'MaskedView',

  _hasWarnedInvalidRenderMask: false,

  render: function() {
    var props = this.props;
    var maskElement = props.maskElement;
    var children = props.children;
    var otherViewProps = Object.assign({}, props);
    delete otherViewProps.maskElement;
    delete otherViewProps.children;

    if (!React.isValidElement(maskElement)) {
      if (!this._hasWarnedInvalidRenderMask) {
        console.warn(
          'MaskedView: Invalid `maskElement` prop was passed to MaskedView. ' +
            'Expected a React Element. No mask will render.'
        );
        this._hasWarnedInvalidRenderMask = true;
      }
      return React.createElement(View, otherViewProps, children);
    }

    return React.createElement(
      RNCMaskedView,
      otherViewProps,
      React.createElement(
        View,
        {
          pointerEvents: 'none',
          style: {
            position: 'absolute',
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
          }
        },
        maskElement
      ),
      children
    );
  }
});

module.exports = MaskedView; 